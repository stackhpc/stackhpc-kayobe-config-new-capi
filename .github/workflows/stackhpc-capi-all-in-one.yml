---
# This reusable workflow deploys a VM on a cloud using Terraform, then deploys
# OpenStack in the VM via Kayobe. Tempest is then used to test the cloud.

name: All in one magnum

on:
  workflow_call:
    inputs:
      kayobe_image:
        description: Kayobe container image
        type: string
        required: true
      os_distribution:
        description: Host OS distribution
        type: string
        default: centos
      os_release:
        description: Host OS release
        type: string
        default: 8-stream
      ssh_username:
        description: User for terraform to access the all-in-one VM
        type: string
        default: cloud-user
      neutron_plugin:
        description: Neutron ML2 plugin
        type: string
        required: true
      vm_image:
        description: Image for the all-in-one VM
        type: string
        default: bb8c0a34-533f-42fb-a49b-3461e677f3f6
      vm_interface:
        description: Default network interface name
        type: string
        default: eth0
      vm_flavor:
        description: Flavor for the all-in-one VM
        type: string
        default: general.v1.medium
      vm_network:
        description: Network for the all-in-one VM
        type: string
        default: stackhpc-release
      vm_subnet:
        description: Subnet for the all-in-one VM
        type: string
        default: stackhpc-release-subnet
      vm_volume_size:
        description: volume size for the all-in-one VM
        type: number
        default: 200
      OS_CLOUD:
        description: Name of cloud in clouds.yaml
        type: string
        required: true
    secrets:
      KAYOBE_VAULT_PASSWORD:
        required: true
      CLOUDS_YAML:
        required: true
      OS_APPLICATION_CREDENTIAL_ID:
        required: true
      OS_APPLICATION_CREDENTIAL_SECRET:
        required: true

jobs:
  # NOTE: Runner needs unzip and nodejs packages.
  all-in-one:
    name: All in one
    runs-on: self-hosted
    permissions: {}
    env:
      KAYOBE_ENVIRONMENT: ci-capi-aio
      KAYOBE_VAULT_PASSWORD: ${{ secrets.KAYOBE_VAULT_PASSWORD }}
      KAYOBE_IMAGE: ${{ inputs.kayobe_image }}
    steps:
      - uses: actions/checkout@v3
        with:
           submodules: true

      - name: Install terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialise terraform
        run: terraform init
        working-directory: ${{ github.workspace }}/terraform/aio

      - name: Generate SSH keypair
        run: ssh-keygen -f id_rsa -N ''
        working-directory: ${{ github.workspace }}/terraform/aio

      - name: Generate clouds.yaml
        run: |
          cat << EOF > clouds.yaml
          ${{ secrets.CLOUDS_YAML }}
          EOF
        working-directory: ${{ github.workspace }}/terraform/aio

      - name: Generate terraform.tfvars
        run: |
          cat << EOF > terraform.tfvars
          ssh_public_key = "id_rsa.pub"
          ssh_username = "${{ env.SSH_USERNAME }}"
          aio_vm_interface = "${{ env.VM_INTERFACE }}"
          aio_vm_name = "${{ env.VM_NAME }}"
          aio_vm_image = "${{ env.VM_IMAGE }}"
          aio_vm_flavor = "${{ env.VM_FLAVOR }}"
          aio_vm_network = "${{ env.VM_NETWORK }}"
          aio_vm_subnet = "${{ env.VM_SUBNET }}"
          aio_vm_volume_size = ${{ env.VM_VOLUME_SIZE }}
          EOF
        working-directory: ${{ github.workspace }}/terraform/aio
        env:
          SSH_USERNAME: "${{ inputs.ssh_username }}"
          VM_NAME: "skc-ci-aio-${{ inputs.neutron_plugin }}-${{ github.run_id }}"
          VM_IMAGE: ${{ inputs.vm_image }}
          VM_FLAVOR: ${{ inputs.vm_flavor }}
          VM_NETWORK: ${{ inputs.vm_network }}
          VM_SUBNET: ${{ inputs.vm_subnet }}
          VM_INTERFACE: ${{ inputs.vm_interface }}
          VM_VOLUME_SIZE: ${{ inputs.vm_volume_size }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ github.workspace }}/terraform/aio
        env:
          OS_CLOUD: ${{ inputs.OS_CLOUD }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ github.workspace }}/terraform/aio
        env:
          OS_CLOUD: ${{ inputs.OS_CLOUD }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}

      - name: Get Terraform outputs
        id: tf_outputs
        run: |
          terraform output -json
        working-directory: ${{ github.workspace }}/terraform/aio

      - name: Write Terraform outputs
        run: |
          cat << EOF > etc/kayobe/environments/$KAYOBE_ENVIRONMENT/tf-outputs.yml
          ${{ steps.tf_outputs.outputs.stdout }}
          EOF

      - name: Write Terraform network config
        run: |
          cat << EOF > etc/kayobe/environments/$KAYOBE_ENVIRONMENT/tf-networks.yml

          admin_oc_net_name: admin
          admin_cidr: "{{ access_cidr.value }}"
          admin_allocation_pool_start: 0.0.0.0
          admin_allocation_pool_end: 0.0.0.0
          admin_gateway: "{{ access_gw.value }}"
          admin_bootproto: dhcp
          admin_ips:
            controller0: "{{ access_ip_v4.value }}"
          EOF

      - name: Write Terraform network interface config
        run: |
          cat << EOF > etc/kayobe/environments/$KAYOBE_ENVIRONMENT/inventory/group_vars/controllers/tf-network-interfaces
          admin_interface: "{{ access_interface.value }}"
          EOF

      - name: Write all-in-one scenario config
        run: |
          cat << EOF > etc/kayobe/environments/$KAYOBE_ENVIRONMENT/zz-aio-scenario.yml
          ---
          os_distribution: ${{ env.OS_DISTRIBUTION }}
          os_release: "${{ env.OS_RELEASE }}"
          kolla_enable_ovn: ${{ env.ENABLE_OVN }}
          EOF
        env:
          ENABLE_OVN: ${{ inputs.neutron_plugin == 'ovn' }}
          OS_DISTRIBUTION: ${{ inputs.os_distribution }}
          OS_RELEASE: ${{ inputs.os_release }}

      # Use a heredoc to define a multiline string output
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
      - name: Set SSH key output
        id: ssh_key
        run: |
          echo "ssh_key<<EOF" >> $GITHUB_OUTPUT
          cat terraform/aio/id_rsa >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Host configure
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-host-configure.sh 
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}
      
      - name: Get IP of AIO
        id: ip
        run: |
          export IP=$(python3 -m ansible adhoc localhost -m debug -a "var=access_ip_v4.value" -e @etc/kayobe/environments/$KAYOBE_ENVIRONMENT/tf-outputs.yml | grep access_ip_v4.value | awk '{print $2}' | tr -d \''"\')
          echo $IP
          echo "ip=$(echo $IP)" >> $GITHUB_OUTPUT

      - name: Tar management cluster setup script
        run: |
          mkdir ./script
          cp .automation/scripts/capi-mgmt.sh ./script/
          tar -cvf mgmt_deploy.tar ./script/

      - name: Transfer management cluster setup script
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ steps.ip.outputs.ip }}
          username: ${{ inputs.ssh_username }}
          key: ${{ steps.ssh_key.outputs.ssh_key }}
          source: mgmt_deploy.tar
          target: /tmp/

      - name: Install management cluster
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-host-command-run.sh --command 'sudo tar -xvf /tmp/mgmt_deploy.tar && sudo chmod +x ./script/capi-mgmt.sh && ./script/capi-mgmt.sh'  -l controllers --show-output
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}
      
      - name: Get kubeconfig
        id: kubeconfig
        run: |
          ssh -i terraform/aio/id_rsa $SSH_USERNAME@$IP "sudo chown $SSH_USERNAME /etc/rancher/k3s/k3s.yaml"
          scp -i terraform/aio/id_rsa $SSH_USERNAME@$IP:/etc/rancher/k3s/k3s.yaml .
        env:
          SSH_USERNAME: "${{ inputs.ssh_username }}"
          IP: ${{ steps.ip.outputs.ip }}
        shell: bash

      - name: Check mgmt cluster has installed correctly
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-host-command-run.sh --command 'kubectl --kubeconfig /home/stack/.kube/config get ns'  -l controllers --show-output
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}
      
      - name: Set kubeconfig
        run: |
          cp k3s.yaml etc/kayobe/environments/$KAYOBE_ENVIRONMENT/kolla/config/magnum/kubeconfig
          cat etc/kayobe/environments/$KAYOBE_ENVIRONMENT/kolla/config/magnum/kubeconfig

      # The same tag may be reused (e.g. pr-123), so ensure we have the latest image.
      - name: Pull latest Kayobe image
        run: |
          sudo docker image pull $KAYOBE_IMAGE

      - name: Magnum container build
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-container-image-build.sh magnum
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}

      - name: Service deploy
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-service-deploy.sh
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}
      
      #can be removed after debugging 
      - name: Check magnum container 
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/overcloud-host-command-run.sh --command 'sudo docker exec -t magnum_conductor bash -c "kubectl --kubeconfig /etc/magnum/kubeconfig get ns"'  -l controllers --show-output
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}

      - name: Configure aio resources
        run: |
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/playbook-run.sh etc/kayobe/ansible/configure-aio-resources.yml
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}

      - name: Tempest tests
        run: |
          mkdir -p tempest-artifacts
          sudo -E docker run -t --rm \
            -v $(pwd):/stack/kayobe-automation-env/src/kayobe-config \
            -v $(pwd)/tempest-artifacts:/stack/tempest-artifacts \
            -e KAYOBE_ENVIRONMENT -e KAYOBE_VAULT_PASSWORD -e KAYOBE_AUTOMATION_SSH_PRIVATE_KEY \
            $KAYOBE_IMAGE \
            /stack/kayobe-automation-env/src/kayobe-config/.automation/pipeline/tempest.sh -e ansible_user=stack
        env:
          KAYOBE_AUTOMATION_SSH_PRIVATE_KEY: ${{ steps.ssh_key.outputs.ssh_key }}

      - name: Upload test result artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tempest-results-${{ inputs.os_distribution }}-${{ inputs.os_release }}-${{ inputs.neutron_plugin }}
          path: tempest-artifacts/*

      - name: Fail if any Tempest tests failed
        run: |
          test $(wc -l < tempest-artifacts/failed-tests) -lt 1

      - name: Destroy
        run: terraform destroy -auto-approve
        working-directory: ${{ github.workspace }}/terraform/aio
        env:
          OS_CLOUD: ${{ inputs.OS_CLOUD }}
          OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
          OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}
        if: always()

      - name: Prune Docker images over 1 week old
        # May fail if another prune is running
        run: sudo docker image prune --all --force --filter until=168h || true
        if: always()
